import streamlit as st
import pandas as pd
import numpy as np
import joblib
import google.generativeai as genai

st.set_page_config(page_title="AI Real Estate Advisor", layout="wide")

# --------------------- C·∫§U H√åNH ---------------------
@st.cache_resource
def load_model(model_name):
    model_paths = {
        "LightGBM": "models/best_lgb_model.pkl",
        "XGBoost": "models/best_xgb_model.pkl",
        "HistGradientBoosting": "models/best_hgb_model.pkl"
    }
    if model_name not in model_paths:
        st.error(f"M√¥ h√¨nh {model_name} kh√¥ng t·ªìn t·∫°i!")
        return None
    try:
        return joblib.load(model_paths[model_name])
    except FileNotFoundError:
        st.error(f"File m√¥ h√¨nh {model_paths[model_name]} kh√¥ng t·ªìn t·∫°i!")
        return None

# C·∫•u h√¨nh Google Gemini API
# genai.configure(api_key=st.secrets["general"]["GEMINI_API_KEY"])
genai.configure(api_key="AIzaSyDBbom8P1ip9cc0bWDyfj5-s51S9f1P7uk")
model = genai.GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")

# --------------------- X·ª¨ L√ù D·ªÆ LI·ªÜU ---------------------
def process_single_real_estate_input(input_data):
    df = pd.DataFrame([input_data])

    # X·ª≠ l√Ω di·ªán t√≠ch
    df['Di·ªán t√≠ch'] = pd.to_numeric(
        df['Di·ªán t√≠ch'].astype(str).str.replace('m2', '').str.strip(),
        errors='coerce'
    ).fillna(0)

    # X·ª≠ l√Ω ƒë∆∞·ªùng tr∆∞·ªõc nh√†
    def extract_width(value):
        value = str(value).replace('m', '').strip()
        if '-' in value:
            nums = [float(x) for x in value.split('-')]
            return sum(nums) / len(nums)
        return float(value) if value else 0
    df['ƒê∆∞·ªùng tr∆∞·ªõc nh√†'] = df['ƒê∆∞·ªùng tr∆∞·ªõc nh√†'].apply(extract_width)

    # Tr√≠ch xu·∫•t th√†nh ph·ªë
    df['Th√†nh ph·ªë'] = df['ƒê·ªãa ch·ªâ'].str.split(',').str[-1].str.strip()

    # Chuy·ªÉn c√°c c·ªôt s·ªë
    for col in ['Ph√≤ng ng·ªß', 'S·ªë t·∫ßng', 'S·ªë toilet', 'S·ªë ph√≤ng kh√°ch']:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    # √Ånh x·∫° gi√° tr·ªã ph√¢n lo·∫°i
    mapping_dicts = {
        'Ph√°p l√Ω': {'S·ªï ƒë·ªè': 0, 'S·ªï h·ªìng': 1, 'H·ª£p ƒë·ªìng mua b√°n': 2},
        'H∆∞·ªõng nh√†': {'ƒê√¥ng': 0, 'T√¢y': 1, 'Nam': 2, 'B·∫Øc': 3},
        'Lo·∫°i ƒë·ªãa ·ªëc': {
            'Nh√† ph·ªë': 0, 'Nh√† ri√™ng': 1, 'Bi·ªát th·ª±': 2,
            'cƒÉn h·ªô chung c∆∞': 3, 'nh√† h√†ng - kh√°ch s·∫°n': 4, 'cƒÉn h·ªô mini - d·ªãch v·ª•': 5
        },
        'Th√†nh ph·ªë': {
            'H·ªì Ch√≠ Minh': 0, 'H√† N·ªôi': 1, 'ƒê√† N·∫µng': 2,
            'Ti·ªÅn Giang': 3, 'B√¨nh D∆∞∆°ng': 4, 'ƒê·ªìng Nai': 5
        }
    }

    for col, mapping in mapping_dicts.items():
        df[col] = df[col].map(mapping).fillna(0).astype(int)

    # ƒê·ªãnh nghƒ©a features
    features = [
        'Di·ªán t√≠ch', 'Ph√≤ng ng·ªß', 'S·ªë t·∫ßng', 'S·ªë toilet', 'S·ªë ph√≤ng kh√°ch',
        'ƒê∆∞·ªùng tr∆∞·ªõc nh√†', 'Ph√°p l√Ω', 'H∆∞·ªõng nh√†', 'Lo·∫°i ƒë·ªãa ·ªëc', 'Th√†nh ph·ªë'
    ]

    return df[features]

# --------------------- D·ª∞ ƒêO√ÅN GI√Å ---------------------
def predict_house_price(X_input, selected_model):
    try:
        if not isinstance(X_input, pd.DataFrame):
            X_input = pd.DataFrame(X_input)

        if X_input.shape[1] != 10:
            st.error("Sai s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng ƒë·∫ßu v√†o!")
            return None

        return np.expm1(selected_model.predict(X_input))
    except Exception as e:
        st.error(f"L·ªói d·ª± ƒëo√°n: {str(e)}")
        return None

# --------------------- T·∫†O PROMPT CHO GEMINI ---------------------
def create_gemini_prompt(input_data, predicted_price):
    prompt = f"""
    [TH√îNG TIN B·∫§T ƒê·ªòNG S·∫¢N]
    - ƒê·ªãa ch·ªâ: {input_data['ƒê·ªãa ch·ªâ']}
    - Di·ªán t√≠ch: {input_data['Di·ªán t√≠ch']}
    - Ph√≤ng ng·ªß: {input_data['Ph√≤ng ng·ªß']}
    - S·ªë t·∫ßng: {input_data['S·ªë t·∫ßng']}
    - S·ªë toilet: {input_data['S·ªë toilet']}
    - S·ªë ph√≤ng kh√°ch: {input_data['S·ªë ph√≤ng kh√°ch']}
    - ƒê∆∞·ªùng tr∆∞·ªõc nh√†: {input_data['ƒê∆∞·ªùng tr∆∞·ªõc nh√†']}
    - Ph√°p l√Ω: {input_data['Ph√°p l√Ω']}
    - H∆∞·ªõng nh√†: {input_data['H∆∞·ªõng nh√†']}
    - Lo·∫°i ƒë·ªãa ·ªëc: {input_data['Lo·∫°i ƒë·ªãa ·ªëc']}

    [GI√Å D·ª∞ ƒêO√ÅN]
    {predicted_price:,.2f} t·ª∑ ƒë·ªìng

    H√£y ph√¢n t√≠ch:
    1. ƒê·ªãnh gi√° cho b·∫•t ƒë·ªông s·∫£n n√†y d·ª±a tr√™n th√¥ng tin cung c·∫•p, gi·∫£i th√≠ch l√Ω do.
    2. ƒê√°nh gi√° m·ª©c gi√° d·ª± ƒëo√°n (cao/th·∫•p/ph√π h·ª£p) so v·ªõi m·∫∑t b·∫±ng khu v·ª±c, t·∫≠p trung v√†o c∆° h·ªôi t·ª´ m·ª©c gi√° n√†y.
    3. ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t v√† nh∆∞·ª£c ƒëi·ªÉm (n·∫øu c√≥) c·ªßa b·∫•t ƒë·ªông s·∫£n, nh·∫•n m·∫°nh c√°c y·∫øu t·ªë t√≠ch c·ª±c.
    4. Ti·ªÅm nƒÉng ƒë·∫ßu t∆∞, n√™u r√µ c∆° h·ªôi sinh l·ªùi ho·∫∑c l·ª£i √≠ch l√¢u d√†i.
    5. Khuy·∫øn ngh·ªã: C√ì N√äN MUA? (Gi·∫£i th√≠ch r√µ l√Ω do, ∆∞u ti√™n g√≥c nh√¨n t√≠ch c·ª±c v·ªÅ gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n).
    6. 3 l∆∞u √Ω quan tr·ªçng n·∫øu quy·∫øt ƒë·ªãnh mua, gi√∫p t·ªëi ∆∞u h√≥a gi√° tr·ªã ƒë·∫ßu t∆∞.

    [L∆ØU √ù]
    - ƒêi th·∫≥ng v√†o ph√¢n t√≠ch, kh√¥ng ch√†o h·ªèi, kh√¥ng gi·ªõi thi·ªáu
    - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, c√≥ c·∫•u tr√∫c.
    - ∆Øu ti√™n d·ªØ li·ªáu th·ª±c t·∫ø v·ªÅ th·ªã tr∆∞·ªùng.
    - ƒê∆∞a ra con s·ªë ∆∞·ªõc l∆∞·ª£ng c·ª• th·ªÉ n·∫øu c√≥ th·ªÉ.
    - Nh·∫•n m·∫°nh c√°c kh√≠a c·∫°nh t√≠ch c·ª±c c·ªßa m·ª©c gi√° d·ª± ƒëo√°n v√† gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n.
    """
    return prompt

# --------------------- GIAO DI·ªÜN STREAMLIT ---------------------
st.title('üè† AI ƒê·ªäNH GI√Å & T∆Ø V·∫§N B·∫§T ƒê·ªòNG S·∫¢N')
st.markdown("""
    <style>
    .stTextInput input, .stSelectbox select {
        font-size: 16px !important;
    }
    </style>
""", unsafe_allow_html=True)

with st.form("real_estate_form"):
    col1, col2 = st.columns(2)

    with col1:
        dia_chi = st.text_input("ƒê·ªãa ch·ªâ (c√≥ d·∫•u ph·∫©y cu·ªëi, VD: 'Qu·∫≠n 1, H·ªì Ch√≠ Minh')", "Qu·∫≠n 1, H·ªì Ch√≠ Minh")
        dien_tich = st.text_input("Di·ªán t√≠ch (VD: 50 m2)", "50 m2")
        duong_truoc_nha = st.text_input("ƒê∆∞·ªùng tr∆∞·ªõc nh√† (VD: 5m ho·∫∑c 4-6m)", "5m")
        phong_ngu = st.text_input("S·ªë ph√≤ng ng·ªß", "2")
        so_tang = st.text_input("S·ªë t·∫ßng", "1")

    with col2:
        so_toilet = st.text_input("S·ªë toilet", "1")
        so_phong_khach = st.text_input("S·ªë ph√≤ng kh√°ch", "1")
        phap_ly = st.selectbox("Ph√°p l√Ω", ["S·ªï ƒë·ªè", "S·ªï h·ªìng", "H·ª£p ƒë·ªìng mua b√°n"])
        huong_nha = st.selectbox("H∆∞·ªõng nh√†", ["ƒê√¥ng", "T√¢y", "Nam", "B·∫Øc"])
        loai_dia_oc = st.selectbox("Lo·∫°i ƒë·ªãa ·ªëc", [
            "Nh√† ph·ªë", "Nh√† ri√™ng", "Bi·ªát th·ª±",
            "cƒÉn h·ªô chung c∆∞", "nh√† h√†ng - kh√°ch s·∫°n", "cƒÉn h·ªô mini - d·ªãch v·ª•"
        ])
        model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n", ["LightGBM", "XGBoost", "HistGradientBoosting"])

    submitted = st.form_submit_button("üöÄ D·ª± ƒëo√°n gi√° & Nh·∫≠n t∆∞ v·∫•n AI")

if submitted:
    with st.spinner('ƒêang ph√¢n t√≠ch...'):
        # T·∫£i m√¥ h√¨nh ƒë∆∞·ª£c ch·ªçn
        selected_model = load_model(model_choice)
        if selected_model is None:
            st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh!")
        else:
            input_data = {
                'ƒê·ªãa ch·ªâ': dia_chi,
                'Di·ªán t√≠ch': dien_tich,
                'ƒê∆∞·ªùng tr∆∞·ªõc nh√†': duong_truoc_nha,
                'Ph√≤ng ng·ªß': phong_ngu,
                'S·ªë t·∫ßng': so_tang,
                'S·ªë toilet': so_toilet,
                'S·ªë ph√≤ng kh√°ch': so_phong_khach,
                'Ph√°p l√Ω': phap_ly,
                'H∆∞·ªõng nh√†': huong_nha,
                'Lo·∫°i ƒë·ªãa ·ªëc': loai_dia_oc
            }

            processed_data = process_single_real_estate_input(input_data)
            predicted_price = predict_house_price(processed_data, selected_model)

            if predicted_price is not None:
                predicted_price = predicted_price[0]

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success(f"**üí∞ Gi√° d·ª± ƒëo√°n (m√¥ h√¨nh {model_choice}):** {predicted_price:,.2f} t·ª∑ ƒë·ªìng")

                # T∆∞ v·∫•n t·ª´ Gemini
                with st.spinner('AI ƒëang t∆∞ v·∫•n...'):
                    prompt = create_gemini_prompt(input_data, predicted_price)
                    try:
                        response = model.generate_content(prompt)
                    except Exception as e:
                        st.error(f"L·ªói khi g·ªçi Gemini API: {str(e)}")
                        response = None

                    if response:
                        st.subheader("ü§ñ T∆∞ v·∫•n chuy√™n gia AI")
                        st.markdown(response.text)

                        # L∆∞u v√†o l·ªãch s·ª≠
                        if 'history' not in st.session_state:
                            st.session_state.history = []

                        st.session_state.history.append({
                            'input': input_data,
                            'price': predicted_price,
                            'model': model_choice,
                            'advice': response.text
                        })

# Hi·ªÉn th·ªã l·ªãch s·ª≠
if 'history' in st.session_state and st.session_state.history:
    st.divider()
    st.subheader("üìö L·ªãch s·ª≠ d·ª± ƒëo√°n")

    for i, item in enumerate(st.session_state.history[::-1], 1):
        with st.expander(f"#{i}: {item['input']['ƒê·ªãa ch·ªâ']} - {item['price']:,.2f} t·ª∑ (M√¥ h√¨nh: {item['model']})"):
            col1, col2 = st.columns([1, 3])
            with col1:
                st.json(item['input'], expanded=False)
            with col2:
                st.markdown(f"**üí° T∆∞ v·∫•n:**\n{item['advice']}")
